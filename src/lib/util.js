/*
  This library contains several common used utility functions used by the
  P2P VPS server APIs.

  Functions included in this library:

  getDevicePublicModel() - retreive the devicePublicModel from the DB.
  getDevicePrivateModel() - retrieve the devicePrivateModel from the DB.
  getLoginPassAndPort() - retrieve the Login, Pass, and Port for a new device.
  getObContract() - get an existing obContract model.
  createObContract() - create an obContract model in the DB.
  createObStoreListing() - create a new listing in the OB store.
  submitToMarket() - generate a new obContract model and store listing.
  removeOBListing() - remove a listing from the OB store.

*/

'use strict';

// Dependencies
const keystone = require('keystone');
const rp = require('request-promise');
// const openbazaar = require('openbazaar-node');

// Instantiate Keystone Models
const logr = keystone.get('logr'); // Logging system
const DevicePublicModel = keystone.list('DevicePublicModel');
const DevicePrivateModel = keystone.list('DevicePrivateModel');
const ObContractModel = keystone.list('obContractModel');

// Return a promise that resolves to the devicePublicModel.
function getDevicePublicModel (deviceId) {
  return new Promise(function (resolve, reject) {
    DevicePublicModel.model.findById(deviceId).exec(function (err, devicePublicModel) {
      if (err) return reject(err);
      if (!devicePublicModel) return reject('Device not found');

      return resolve(devicePublicModel);
    });
  });
}

// Return a promise that resolves to the devicePrivateModel.
function getDevicePrivateModel (deviceId) {
  return new Promise(function (resolve, reject) {
    DevicePrivateModel.model.findById(deviceId).exec(function (err, devicePrivateModel) {
      if (err) return reject(err);
      if (!devicePrivateModel) return reject('Device private model not found');

      return resolve(devicePrivateModel);
    });
  });
}

// Return a promise that resolves to an object containing a new login, password,
// and SSH port, generated by Port Control.
function getLoginPassAndPort () {
  const options = {
    method: 'GET',
    uri: 'http://localhost:3000/api/portcontrol/create',
    json: true // Automatically stringifies the body to JSON
  };

  return rp(options)
}

// Return a promise that resolves to the devicePublicModel.
function getObContractModel (deviceId) {
  return new Promise(function (resolve, reject) {
    ObContractModel.model.findById(deviceId).exec(function (err, thisModel) {
      if (err) return reject(err);
      if (!thisModel) return reject('Device not found');

      return resolve(thisModel);
    });
  });
}

// Create a new obContract model based on the passed in object.
function createObContract (obj) {
  let options = {
    method: 'POST',
    uri: 'http://localhost:3000/api/obContract/create',
    body: obj,
    json: true // Automatically stringifies the body to JSON
    // resolveWithFullResponse: true
  }

  // Create the obContract model.
  return rp(options)
}

// Create a new OB store listing by calling the createMarketListing API.
function createObStoreListing (obContractModel) {
  let options = {
    method: 'GET',
    uri: `http://localhost:3000/api/ob/createMarketListing/${obContractModel.collection._id}`,
    json: true // Automatically stringifies the body to JSON
  }

  return rp(options)
}

// Generate an obContract model and use it to create a new listing on the OB
// store.
// device = devicePublicModel
// obj = object used to create an obContract model.
// Returns a promise that resolves to the ID of the newly created obContract model.
async function submitToMarket (device, obj) {
  logr.debug('Entering devicePublicData.js/submitToMarket().');

  try {
    debugger

    // Check if device already has an obContract GUID associated with it.
    const obContractId = device.get('obContract');
    if (obContractId !== '' && obContractId !== null) {
      debugger;
      try {
        await removeOBListing(device);

        logr.log(`OB Listing for ${device._id} successfully removed.`);
      } catch (err) {
        debugger;
        if (err.toString().indexOf('no obContract model associated with device') > -1) {
          console.error('Device has no OB listing associated with it. Skipping.');
        } else if (err.statusCode >= 500) {
          console.error(`There was an issue with finding the listing on the OpenBazaar server. Skipping.`);
        } else {
          console.error('There was an error trying to remove the OB listing:');
          console.error(JSON.stringify(err, null, 2));
        }
      }
    }

    // logr.debug(`Time now: ${new Date()}`);
    // logr.debug(`Setting expiration to: ${obj.experation}`);

    // Create an obContract model.
    let obContractModel = await createObContract(obj);

    // Create a new store listing.
    let success = await createObStoreListing(obContractModel);

    if (success.success) logr.log('Successfully created OB listing.');
    else logr.log('OB listing creation failed.');

    // Return the GUID of the newly created obContract model.
    return obContractModel.collection._id

  // Catch any errors.
  } catch (err) {
    debugger
    console.error('Error trying to create OB listing in util.js/submitToMarket():');
    if (err.statusCode >= 500) {
      console.error('Could not connect to server.');
    } else {
      console.error(JSON.stringify(err, null, 2));
    }
    throw err;
  }
}

// This function remove the associated listing from the OB store.
function removeOBListing (deviceData) {
  logr.debug('Entering devicePublicData.js/removeOBListing().');

  debugger;

  const obContractId = deviceData.obContract;

  // Validation/Error Handling
  if (obContractId === undefined || obContractId === null) {
    throw `no obContract model associated with device ${deviceData._id}`;
  }

  const options = {
    method: 'GET',
    uri: `http://p2pvps.net/api/ob/removeMarketListing/${obContractId}`,
    json: true // Automatically stringifies the body to JSON
  };

  return rp(options)
    .then(function (data) {
      debugger;

      if (!data.success) {
        throw `Could not remove OB store listing for device ${obContractId}`;
      }

      console.log(
        `Successfully removed listing on OB store with obContract model ID ${obContractId}`
      );
      return true;
    })
    .catch(err => {
      debugger;
      console.error(`Could not remove OB store listing for device ${obContractId}.`);
      throw err;
    });
}

module.exports = {
  getDevicePublicModel,
  getDevicePrivateModel,
  getLoginPassAndPort,
  getObContractModel,
  createObContract,
  createObStoreListing,
  submitToMarket,
  removeOBListing
};
